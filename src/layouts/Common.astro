---
import type { BlogPost, Frontmatter } from "@/types";
import Han from "@/components/Mode.astro";
import "@/styles/icon.less";
import LicenceBox from "@/components/licences/LicenceBox.astro";
import { crc32base } from "@/scripts/serendipity";
import type { AtomIconName } from "@/scripts/icons";
import Image from "astro/components/Image.astro";
import { getEntry } from "astro:content";
export interface Props {
  layoutProps: {
    url?: string;
    file?: string;
    frontmatter?: Frontmatter;
  }
  icons?: {
    calendar?: AtomIconName;
    category?: AtomIconName;
    tag?: AtomIconName;
  }
}
function arrify<T>(x: T | T[]): T[] {
  return Array.isArray(x) ? x : [x];
}

const { icons, layoutProps } = Astro.props;
console.info(layoutProps);
const { url, file } = layoutProps;
console.log("ntransformed id", url, file);
import { url2id } from "@/scripts/post";
const id = url2id(url?? file ?? Astro.url.pathname);
console.log("transformed id", id);
const frontmatter = (await getEntry("blog", id))?.data;
if (!frontmatter) {
  throw new Error(`Post ${id} not found.`);
}
const { vert, hant, date } = frontmatter;
const cats = arrify(frontmatter.categories);
const tags = arrify(frontmatter.tags);
const cover = frontmatter.hide_cover ? undefined : frontmatter.photo;
const licence = frontmatter.licence ?? "CcByNc";

import "@/styles/article.less";
import { Picture } from "astro:assets";
---

{
  cover && (
    <figure class="cover">
      {
        (cover.img !== undefined) ? (
          <Picture
            src={cover.img}
            alt={cover.alt ?? ""}
            formats={["avif", "webp", "jpg"]}
          />
        ) : (
          <img src={cover.src} alt={cover.alt} />
        )
      }
      {cover.caption && (
        <figcaption set:html={cover.caption} />
      )}
    </figure>
  )
}
{
  !frontmatter.hide_title && (
    <h1
      transition:name={crc32base(frontmatter.title)}
      set:text={frontmatter.title}
    />
  )
}
{
  (hant || vert) && (
    <Han float={true} vert={vert} hant={hant === false ? false : undefined} />
  )
}
<div class="info">
  <div>
    <div class:list={[icons?.calendar ?? 'i-mdi:date-range', 'icon']}></div>
    日期：
    <time
      datetime={date as unknown as string}
      set:text={new Date(frontmatter.date).toLocaleDateString("zh")}
    />
  </div>
  {
    !!cats.length && (
      <div>
        <div class:list={[icons?.category ?? 'i-pixelarticons:folder-plus', 'icon']}></div>
        分类：
        {cats.map((cat) => (
          <a class="cat" href={`/categories/${cat}/`}>
            {cat}
          </a>
        ))}
      </div>
    )
  }
  {
    !!tags.length && (
      <div>
        <div class:list={[icons?.tag ?? 'i-pixelarticons:label', 'icon']}></div>
        标签：
        {tags.map((tag) => (
          <a class="tag" href={`/tags/${tag}/`}>
            {tag}
          </a>
        ))}
      </div>
    )
  }
</div>
<article id="post">
  <slot />
</article>
<LicenceBox name={licence} />

<style is:global lang="less">
  .icon {
    @apply inline-block;
    vertical-align: sub;
    width: 1.2em;
    height: 1.2em;
  }
  .cover {
    margin: 0;
    height: auto;
    img {
      object-fit: contain;
      inline-size: 100%;
      block-size: auto;
      border-radius: 4px;
    }
    figcaption {
      margin-inline: 2rem;
      text-align: center;
      font-size: 0.9rem;
      color: #555; // TODO: use theme color
    }
  }
  .info {
    margin-block: 1rem;
    color: var(--text-secondary, #2e2e2e);
    font-size: 0.9rem;
    text-align: center;
    a.tag,
    a.cat {
      color: #151515;
      text-decoration: none;
      border: none;
      padding: 4px;
      margin-block: 3px;
      margin-inline: 6px;
      margin-inline: 5px;
      border-radius: 0.5rem;
      transition: background-color 0.1s;
      border: 2px solid var(--bg-secondary);
      color: var(--text-secondary);
      &:hover {
        background-color: var(--bg-secondary-hover);
      }
      &:active {
        background-color: var(----bg-secondary-active);
      }
    }
    & > div {
      margin: 0.8rem 0;
    }
  }
</style>
