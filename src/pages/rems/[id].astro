---
import { unified, type Parser } from "unified";
import Page from "@/templates/zh/Page.astro";
import Layout from "@/layouts/Default.astro";
// import astroConfig from "astro.config";
import { getCollection } from "astro:content";
import { transformDoc, DEFAULT_CONFIG } from "rehype-remnote";
import stringify from 'rehype-stringify';
import type { Remnote } from "@/scripts/schema/remnote";
import { rehypePipe } from "@/scripts/rehype/common";
import { generateUno } from "@/scripts/uno";

export type Props = Remnote;

export async function getStaticPaths() {
	const notes = await getCollection("rems");
	return notes.map((note) => ({
		params: { id: note.id },
		props: note.data,
	}));
}

const { id } = Astro.params;
const title = "RemNote 笔记";
const data = Astro.props;
const map = new Map<string, string>();
map.set(id, data);

function remParse(options = DEFAULT_CONFIG) {
  const self = this;

  self.parser = parser as Parser;

  function parser(doc: string, file: unknown) {
    doc = map.get(doc)!;
    return transformDoc(doc, options);
  }
}


let processor = unified().use(remParse);
for (const plugin of rehypePipe) {
  if (Array.isArray(plugin))
    processor = processor.use(...plugin);
  else
    processor = processor.use(plugin);
}
// @ts-expect-error
processor = processor.use(stringify);
const html = (await processor.process(id)).toString();
const style = await generateUno(html);

import "rehype-remnote/style/mini.css";
import "rehype-remnote/style/cloze.css";
import "rehype-remnote/style/math.css";
import "@/styles/a.less";
---

<style set:html={style} />
<Page
  title={title}
  og={{
    title,
    description: "RemNote",
    url: `https://blog.xinshijiededa.men/rem/${id}`,
  }}>
<Layout>
  <article id="post">
    <h1>{id}</h1>
    <div class="rem" set:html={html}></div>
  </article>

  <style lang="less" is:global>
    .rem {
      --list-item-delta: -2.9ch;

      a {
        border-radius: 0!important;
      }

      a, span.cloze, li:not(:has(details:only-child)) {
        transition: background-color 0.1s;
        border-radius: 0.2em;
        &:hover {
          background-color: rgba(100, 100, 100, 0.1);
        }
        &:active {
          background-color: rgba(100, 100, 100, 0.2);
        }
      }

      details {
        summary {
          &:hover {
            cursor: copy;
            background-color: transparent;
          }

            &[open] {
              cursor: text;
            }
          }
        }

        li {
          padding-block: .15em;
        }
      }
  </style>
</Layout>
</Page>
