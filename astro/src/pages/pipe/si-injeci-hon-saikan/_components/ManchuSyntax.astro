---
type Vocabulary = Record<string, string>;

export interface Props {
  vocab: Vocabulary;
  lines: string;
}

// turn Astro.props.vocab into a map
const vocab = new Map(
  Object.entries(Astro.props.vocab).map((x) => {
    return [
      x[0].replaceAll("/", ""),
      {
        mnc: x[0],
        ja: x[1],
      },
    ];
  })
);

let pairs = Astro.props.lines
  .trim()
  .split("\n\n")
  .map((line) => {
    const lines = line.split("\n").filter((x) => !x.startsWith("//"));
    if (lines.length != 3) {
      throw new Error(`Invalid Manchu lines: ${lines}`);
    }
    return {
      mnc: lines[0],
      ja: lines[1],
      zh: lines[2],
    };
  });
function moelify(str: string) {
  return str
    .replaceAll("v", "ū")
    .replaceAll("iy", "<s>i</s>y")
    .replaceAll("uw", "<s>u</s>w")
    .replaceAll("mbi", "m<s>b</s>i");
}

function get_sections(str: string) {
  const regex = /(\d)(\D+)/g;
  const sections: [string, number][] = [];
  let match;
  while ((match = regex.exec(str))) {
    sections.push([match[2], parseInt(match[1])]);
  }
  return sections;
  // Output: [["把", 6], ["所有的", 1], ["烦恼", 2], ["所有的", 4], ["worries", 5], ["统统都吹散", 6]]
}
---

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Noto+Sans+Mongolian&family=Ubuntu+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap"
  rel="stylesheet"
/>

{
  pairs.map(({ mnc, ja, zh }, line_idx) => {
    const japanese = mnc
      .split(/ /)
      .map((word) => vocab.get(word.replace(/[.?,!]/g, "")));

    const get_color = (x: number) => (x == 0 ? 0 : ((x + line_idx) % 6) + 1);

    return (
      <div class="line">
        <div lang="mnc">
          {mnc.split(" ").map((word, idx) => (
            <span
              title={japanese[idx]?.ja.replaceAll("/", "")}
              class={`color-${get_color(idx + 1)}`}
              set:html={moelify(word) + " "}
            />
          ))}
        </div>
        <div lang="ja">
          {get_sections(ja).map(([word, idx]) => {
            return (
              <span
                class={`color-${get_color(idx as number)}`}
                set:text={word}
              />
            );
          })}
        </div>
        <div lang="zh">
          {get_sections(zh).map(([word, idx]) => {
            return (
              <span
                class={`color-${get_color(idx as number)}`}
                set:text={word}
              />
            );
          })}
        </div>
      </div>
    );
  })
}

<style>
  div.line {
    text-align: left;
  }
  div[lang="mnc"] span:hover {
    font-weight: bold;
    cursor: help;
  }
  [lang="mnc"] {
    font-family: "Ubuntu Mono", "Noto Sans Mono", "Noto Sans Mono CJK SC",
      "Consolas", monospace;
    font-weight: 400;
  }
  .color-0 {
    color: #3b3b3b;
  }
  .color-1 {
    color: #f73b3b;
  }
  .color-2 {
    color: #468f1f;
  }
  .color-3 {
    color: #bb078b;
  }
  .color-4 {
    color: #0d65a4;
  }
  .color-5 {
    color: #da5807;
  }
  .color-6 {
    color: #e1204d;
  }
</style>
