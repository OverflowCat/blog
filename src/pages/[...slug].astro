---
import type { CollectionEntry } from "astro:content";
import Page from "@/templates/zh/Page.astro";
import { toSupportedImage } from "@/scripts/open-graph";
import { getBlogPosts } from "@/scripts/post";
import SlotRenderer from "@/components/SlotRenderer.astro";

// @ts-ignore
import type { AstroComponentFactory } from "astro/runtime/server/index.js";
import { getEntry } from "astro:content";
import getCC from "@/scripts/cc";

export async function getStaticPaths() {
  const posts = (await getBlogPosts()).map((post) => {
    const slug = post.slug;
    return {
      params: { slug: post.slug },
      props: { slug, hant: false },
    }
  });
  const hantPosts = posts.map((post) => {
    const slug = post.props.slug;
    return {
      params: { slug: `${slug}/hant/` },
      props: { slug, hant: true }
    }
  });
  return [...posts, ...hantPosts];
}

export type Props = {
  slug: string,
  hant: boolean,
}

const post = await getEntry("blog", Astro.props.slug);
if (!post) throw new Error(`Post ${Astro.params.slug} not found at ${Astro.props.slug}. Check if slug is correct.`);
// const slug = Astro.props.slug;
const isHant = Astro.props.hant;
let Content: AstroComponentFactory; //  = (() => <p>渲染失败</p>)()
try {
  Content = (await post.render()).Content;
} catch (e) {
  console.error(e);
  throw e;
}

let title = post.data.title;
if (post.data.categories.includes("译文")) {
  title = `（译）${title}`;
}

const metas: { [key: string]: string } = post.data.categories?.includes(
  "Tonsky",
)
  ? {
      viewport: "width=640",
      "theme-color": "hsl(51, 100%, 59%)",
    }
  : {
      "theme-color": "#111",
    };
Astro.locals.noscript = post.data.noscript;
---

<Page
  title={title}
  og={{
    title,
    description: post.data.description ?? "新世界的大门",
    image: post.data.photo
      ? toSupportedImage(
          typeof post.data.photo === "string"
            ? post.data.photo
            : post.data.photo.src,
        )
      : undefined,
    url: `https://blog.xinshijiededa.men/${post.slug}`,
  }}
  metas={metas}
  source={`https://github.com/OverflowCat/blog/blob/src/src/content/blog/${post.id}?plain=1`}
>
  {
    isHant ? (
      <SlotRenderer
        callback={(s) => {
          let res = getCC()(s);
          res = res.replaceAll(` lang="zh-Hans"`, ` lang="zh-Hant"`);
          return res;
        }}
      >
        <Content />
      </SlotRenderer>
    ) : (
      <Content />
    )
  }
</Page>
