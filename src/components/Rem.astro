---
import { unified, type Parser } from "unified";
import Page from "@/templates/zh/Page.astro";
import Layout from "@/layouts/Default.astro";
// import astroConfig from "astro.config";
import { getEntry } from "astro:content";
import { transformDoc, DEFAULT_CONFIG } from "rehype-remnote";
import stringify from 'rehype-stringify';
import type { Remnote } from "@/scripts/schema/remnote";
import { rehypePipe } from "@/scripts/rehype/common";
import { generateUno } from "@/scripts/uno";

/*
export type Props = Remnote;
export async function getStaticPaths() {
	const notes = await getCollection("rems");
	return notes.map((note) => ({
		params: { id: note.id },
		props: note.data,
	}));
}
*/

export type Props = {
  id: string;
};

const { id } = Astro.props;
const entry = await getEntry("rems", id);
const data = entry.data;

function remParse(options = { ...DEFAULT_CONFIG, unwrapRoot: true, }) {
  const self = this;

  self.parser = parser as Parser;

  function parser(doc: string, file: unknown) {
    doc = data;
    return transformDoc(doc, options);
  }
}

let processor = unified().use(remParse);
for (const plugin of rehypePipe) {
  if (Array.isArray(plugin))
    processor = processor.use(...plugin);
  else
    processor = processor.use(plugin);
}
// @ts-expect-error
processor = processor.use(stringify);
const html = (await processor.process(id)).toString();
const style = await generateUno(html);

import "rehype-remnote/style/mini.css";
import "rehype-remnote/style/cloze.css";
import "rehype-remnote/style/math.css";
import "@/styles/a.less";
---

<style>
  @import url('https://fonts.googleapis.com/css2?family=Inria+Sans:ital,wght@0,400;0,700;1,400;1,700&display=swap');
</style>
<div class="rem" set:html={html}></div>
<style set:html={style} is:global />
<style lang="less" is:global>
  .rem details[open]:before {
    z-index: initial!important;
  }

  figure:has(pre) {
    margin-block: 0!important;
    margin-inline: .5em!important;
  }

  .rem, figcaption {
    font-family: 'Inria Sans', "Noto Sans CJK SC", sans-serif;
  }

  .rem {
    a {
      border-radius: 0!important;
    }
    padding-inline-start: calc(-1 * var(--list-item-delta) + .2em);
    padding-inline-end: .4rem;
    &, a, span.cloze, li:not(:has(details:only-child)) {
      transition: background-color 0.1s;
      border-radius: 0.25rem;
      &:hover {
        background-color: var(--hover-bg-color);
      }
      &:active {
        background-color: var(--hover-bg-color);
      }
    }

    details {
      summary {
        &:hover {
          cursor: copy;
          background-color: transparent;
        }

          &[open] {
            cursor: text;
          }
        }
      }

      li {
        padding-block: .15em;
      }

      .card-arrow, details::before {
        font-weight: 600;
        font-family: "Noto Sans", sans-serif, system-ui;
      }
    }
</style>
