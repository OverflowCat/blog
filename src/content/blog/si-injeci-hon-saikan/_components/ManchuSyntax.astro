---
type Vocabulary = Record<string, string>;

export interface Props {
  vocab: Vocabulary;
  lines: string;
  manju?: boolean;
}

import "@/styles/manchu.less";

const manju = Astro.props.manju;

// turn Astro.props.vocab into a map
const vocab = new Map(
  Object.entries(Astro.props.vocab).map((x) => {
    return [
      x[0].replaceAll("/", ""),
      {
        mnc: x[0],
        ja: x[1],
      },
    ];
  })
);

let pairs = Astro.props.lines
  .trim()
  .split("\n\n")
  .map((line) => {
    const lines = line.split("\n").filter((x) => !x.startsWith("//"));
    if (lines.length != 3) {
      throw new Error(`Invalid Manchu lines: ${lines}`);
    }
    return {
      mnc: lines[0],
      ja: lines[1],
      zh: lines[2],
    };
  });
function moelify(str: string) {
  return str
    .replaceAll("v", "ū")
    .replaceAll("iy", "<s>i</s>y")
    .replaceAll("uw", "<s>u</s>w")
    .replaceAll("mbi", "m<s>b</s>i");
}

function get_sections(str: string) {
  const regex = /(\d)(\D+)/g;
  const sections: [string, number][] = [];
  let match;
  while ((match = regex.exec(str))) {
    sections.push([match[2], parseInt(match[1])]);
  }
  return sections;
  // Output: [["把", 6], ["所有的", 1], ["烦恼", 2], ["所有的", 4], ["worries", 5], ["统统都吹散", 6]]
}

function manjuify(str: string) {
  str = str.replace(/(?<=\S|\b)-/, "");
  var tmp = "";
  if (str.length > 0) {
    for (var i = 0; i < str.length; i++) {
      var val = str.charAt(i);
      var prev = " ";
      if (i > 0) {
        prev = str.charAt(i - 1);
      }
      if (val == "a") {
        tmp += "ᠠ";
      } else if (val == "e") {
        tmp += "ᡝ";
      } else if (val == "i") {
        tmp += "ᡳ";
      } else if (val == "o") {
        tmp += "ᠣ";
      } else if (val == "u") {
        tmp += "ᡠ";
      } else if (val == "v") {
        tmp += "ᡡ";
      } else if (val == "@" || val == "ū") {
        tmp += "ᡡ";
      } else if (val == "n") {
        tmp += "ᠨ";
      } else if (val == "N") {
        tmp += "ᠩ";
      } else if (val == "b") {
        tmp += "ᠪ";
      } else if (val == "p") {
        tmp += "ᡦ";
      } else if (val == "x") {
        tmp += "ᡧ";
      } else if (val == "S" || val == "š" || val == "x") {
        tmp += "ᡧ";
      } else if (val == "k") {
        tmp += "ᡴ";
      } else if (val == "g") {
        if (prev == "ᠨ" || prev == "n") {
          tmp = tmp.substring(0, tmp.length - 1);
          tmp += "ᠩ";
        } else {
          tmp += "ᡤ";
        }
      } else if (val == "h") {
        tmp += "ᡥ";
      } else if (val == "m") {
        tmp += "ᠮ";
      } else if (val == "l") {
        tmp += "ᠯ";
      } else if (val == "t") {
        tmp += "ᡨ";
      } else if (val == "d") {
        tmp += "ᡩ";
      } else if (val == "s") {
        if (prev == "ᡨ" || prev == "t") {
          tmp = tmp.substring(0, tmp.length - 1);
          tmp += "ᡮ";
        } else {
          tmp += "ᠰ";
        }
      } else if (val == "c" || val == "q") {
        tmp += "ᠴ";
      } else if (val == "j") {
        tmp += "ᠵ";
      } else if (val == "y") {
        tmp += "ᠶ";
      } else if (val == "r") {
        tmp += "ᡵ";
      } else if (val == "w") {
        tmp += "ᠸ";
      } else if (val == "f") {
        tmp += "ᡶ";
      } else if (val == "K") {
        tmp += "ᠺ";
      } else if (val == "G") {
        tmp += "ᡬ";
      } else if (val == "H") {
        tmp += "ᡭ";
      } else if (val == "J") {
        tmp += "ᡷ";
      } else if (val == "C") {
        tmp += "ᡱ";
      } else if (val == "R") {
        tmp += "ᡰ";
      } else if (val == "z") {
        if (prev == "ᡩ" || prev == "d") {
          tmp = tmp.substring(0, tmp.length - 1);
          tmp += "ᡯ";
        } else {
          tmp += "ᡯ"; //"z" org
        }
      } else if (val == "'") {
        tmp += "\u180B";
      } else if (val == "." || val == ":") {
        tmp += "᠉";
      } else if (val == ",") {
        tmp += "᠈";
      } else if (val == '"') {
        tmp += "\u180C";
      } else if (val == "`") {
        tmp += "\u180D";
      } else if (val == "_") {
        tmp += "\u180E";
      } else if (val == "*") {
        tmp += "\u202F";
      } else if (val == "-") {
        tmp += "\u200D";
      } else {
        tmp += val;
      }
    }
  }
  return tmp;
}
---

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<!-- Noto Sans Mongolian is injected globally in Hexo -->
<link
  href="https://fonts.googleapis.com/css2?family=Ubuntu+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap"
  rel="stylesheet"
/>

<div class={manju ? "mnc-area" : "moe-area"}>
  {
    pairs.map(({ mnc, ja, zh }, line_idx) => {
      const japanese = mnc
        .split(/ /)
        .map((word) => vocab.get(word.replace(/[.?,!]/g, "")));

      const get_color = (x: number) => (x == 0 ? 0 : ((x + line_idx) % 6) + 1);

      return (
        <div class="line">
          <div lang={manju ? "mnc" : "moe"}>
            {mnc.split(" ").map((word, idx) => (
              <span
                title={japanese[idx]?.ja.replaceAll("/", "")}
                class={`color-${get_color(idx + 1)}`}
                set:html={(manju ? manjuify(word) : moelify(word)) + " "}
              />
            ))}
          </div>
          <div lang="ja">
            {get_sections(ja).map(([word, idx]) => {
              return (
                <span
                  class={`color-${get_color(idx as number)}`}
                  set:text={word}
                />
              );
            })}
          </div>
          <div lang="zh">
            {get_sections(zh).map(([word, idx]) => {
              return (
                <span
                  class={`color-${get_color(idx as number)}`}
                  set:text={word}
                />
              );
            })}
          </div>
        </div>
      );
    })
  }
</div>

<!-- inject global manchu styles -->
<style is:global is:inline>
  [lang="moe"] {
    font-family: "Ubuntu Mono", "Noto Sans Mono", "Noto Sans Mono CJK SC",
      "Consolas", monospace;
  }
</style>

<style>
  div.line {
    text-align: left;
  }
  .mnc-area {
    writing-mode: vertical-lr;
    overflow-x: scroll;
    max-width: 100%;
    margin: 8px;
    padding: 4px;
    padding-top: 12px;
  }
  .line {
    line-height: 160%;
    margin-block-start: 0.85em;
    margin-block-end: 0.85em;
  }
  div[lang^="m"] span:hover {
    font-weight: bold;
    cursor: help;
  }
  .color-0 {
    color: #3b3b3b;
  }
  .color-1 {
    color: #f73b3b;
  }
  .color-2 {
    color: #468f1f;
  }
  .color-3 {
    color: #bb078b;
  }
  .color-4 {
    color: #0d65a4;
  }
  .color-5 {
    color: #da5807;
  }
  .color-6 {
    color: #e1204d;
  }
</style>
